#!/usr/bin/python
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm,rc
import numpy as np
import sys

profit_r_raw0 = """e1   368633.143,    e2   720246.857,    e3  1054841.143,    e4  1372416.000,    e5  1672971.429,    e6  1956507.429,    e7  2223024.000,    e8  2472521.143,    e9  2704998.857,    e10 2920457.143,    e11 3118896.000,    e12 3300315.429,    e13 3464715.429
e14 3612096.000,    e15 3742457.143,    e16 3855798.857,    e17 3952121.143,    e18 4031424.000,    e19 4093707.429,    e20 4138971.429,    e21 4167216.000,    e22 4178441.143,    e23 4172646.857,    e24 4149833.143,    e25 4110000.000,    e26 4053147.429
e27 3979275.429,    e28 3888384.000,    e29 3780473.143,    e30 3655542.857,    e31 3513593.143,    e32 3354624.000,    e33 3178635.429,    e34 2985627.429,    e35 2775600.000,    e36 2548553.143,    e37 2304486.857,    e38 2043401.143,    e39 1765296.000
e40 1470171.429,    e41 1158027.429,    e42  828864.000,    e43  482681.143,    e44  119478.857,    e45 -260742.857,    e46 -657984.000,    e47 -1.07224E+6,    e48 -1.50352E+6,    e49 -1.95182E+6,    e50 -2.41714E+6,    e51 -2.89948E+6,    e52 -3.39884E+6
e53 -3.91522E+6,    e54 -4.44861E+6,    e55 -4.99903E+6,    e56 -5.56646E+6,    e57 -6.15092E+6,    e58 -6.75239E+6,    e59 -7.37089E+6,    e60 -8.00640E+6,    e61 -8.65893E+6,    e62 -9.32848E+6,    e63 -1.00151E+7,    e64 -1.07186E+7,    e65 -1.14393E+7
e66 -1.21769E+7,    e67 -1.29315E+7,    e68 -1.37032E+7,    e69 -1.44919E+7,    e70 -1.52976E+7,    e71 -1.61203E+7,    e72 -1.69601E+7,    e73 -1.78168E+7,    e74 -1.86906E+7,    e75 -1.95814E+7"""

profit_r_raw2 = """e1   868633.143,    e2  1720246.857,    e3  2554841.143,    e4  3372416.000,    e5  4172971.429,    e6  4956507.429,    e7  5723024.000,    e8  6472521.143,    e9  7204998.857,    e10 7920457.143,    e11 8618896.000,    e12 9300315.429,    e13 9964715.429
e14 1.061210E+7,    e15 1.124246E+7,    e16 1.185580E+7,    e17 1.245212E+7,    e18 1.303142E+7,    e19 1.359371E+7,    e20 1.413897E+7,    e21 1.466722E+7,    e22 1.517844E+7,    e23 1.567265E+7,    e24 1.614983E+7,    e25 1.661000E+7,    e26 1.705315E+7
e27 1.747928E+7,    e28 1.788838E+7,    e29 1.828047E+7,    e30 1.865554E+7,    e31 1.901359E+7,    e32 1.935462E+7,    e33 1.967864E+7,    e34 1.998563E+7,    e35 2.027560E+7,    e36 2.054855E+7,    e37 2.080449E+7,    e38 2.104340E+7,    e39 2.126530E+7
e40 2.147017E+7,    e41 2.165803E+7,    e42 2.182886E+7,    e43 2.198268E+7,    e44 2.211948E+7,    e45 2.223926E+7,    e46 2.234202E+7,    e47 2.242776E+7,    e48 2.249648E+7,    e49 2.254818E+7,    e50 2.258286E+7,    e51 2.260052E+7,    e52 2.260116E+7
e53 2.258478E+7,    e54 2.255139E+7,    e55 2.250097E+7,    e56 2.243354E+7,    e57 2.234908E+7,    e58 2.224761E+7,    e59 2.212911E+7,    e60 2.199360E+7,    e61 2.184107E+7,    e62 2.167152E+7,    e63 2.148494E+7,    e64 2.128135E+7,    e65 2.106074E+7
e66 2.082311E+7,    e67 2.056846E+7,    e68 2.029680E+7,    e69 2.000811E+7,    e70 1.970240E+7,    e71 1.937967E+7,    e72 1.903993E+7,    e73 1.868316E+7,    e74 1.830938E+7,    e75 1.791857E+7"""

profit_r_raw5 = """e1  1119490.286,    e2  2221961.143,    e3  3307412.571,    e4  4375844.571,    e5  5427257.143,    e6  6461650.286,    e7  7479024.000,    e8  8479378.286,    e9  9462713.143,    e10 1.042903E+7,    e11 1.137832E+7,    e12 1.231060E+7,    e13 1.322586E+7
e14 1.412410E+7,    e15 1.500531E+7,    e16 1.586951E+7,    e17 1.671669E+7,    e18 1.754685E+7,    e19 1.835999E+7,    e20 1.915611E+7,    e21 1.993522E+7,    e22 2.069730E+7,    e23 2.144236E+7,    e24 2.217040E+7,    e25 2.288143E+7,    e26 2.357543E+7
e27 2.425242E+7,    e28 2.491238E+7,    e29 2.555533E+7,    e30 2.618126E+7,    e31 2.679016E+7,    e32 2.738205E+7,    e33 2.795692E+7,    e34 2.851477E+7,    e35 2.905560E+7,    e36 2.957941E+7,    e37 3.008620E+7,    e38 3.057597E+7,    e39 3.104872E+7
e40 3.150446E+7,    e41 3.194317E+7,    e42 3.236486E+7,    e43 3.276954E+7,    e44 3.315719E+7,    e45 3.352783E+7,    e46 3.388144E+7,    e47 3.421804E+7,    e48 3.453762E+7,    e49 3.484018E+7,    e50 3.512571E+7,    e51 3.539423E+7,    e52 3.564573E+7
e53 3.588021E+7,    e54 3.609767E+7,    e55 3.629811E+7,    e56 3.648154E+7,    e57 3.664794E+7,    e58 3.679732E+7,    e59 3.338564E+7,    e60 2.803474E+7,    e61 2.248662E+7,    e62 1.674128E+7,    e63 1.079870E+7,    e64 4658907.429,    e65 -1.67811E+6
e66 -8.21236E+6,    e67 -1.29315E+7,    e68 -1.37032E+7,    e69 -1.44919E+7,    e70 -1.52976E+7,    e71 -1.61203E+7,    e72 -1.69601E+7,    e73 -1.78168E+7,    e74 -1.86906E+7,    e75 -1.95814E+7"""

rec_price_raw="""e1   10.000,    e2   10.000,    e3   10.000,    e4   10.000,    e5   10.000,    e6   10.000,    e7   10.000,    e8   10.000,    e9   10.000,    e10  10.000,    e11  10.000,    e12  10.000,    e13  10.000,    e14  10.000,    e15  10.000,    e16  10.000
e17  10.000,    e18  10.000,    e19  10.000,    e20  10.000,    e21  10.000,    e22  10.000,    e23  10.000,    e24  10.000,    e25  10.000,    e26  10.000,    e27  10.000,    e28  10.000,    e29  10.000,    e30  10.000,    e31  10.000,    e32  10.000
e33  10.000,    e34  10.000,    e35  10.000,    e36  10.000,    e37  10.000,    e38  10.000,    e39  10.000,    e40  10.000,    e41  10.000,    e42  10.000,    e43  10.000,    e44  10.000,    e45  10.000,    e46  10.000,    e47  10.000,    e48  10.000
e49  10.000,    e50  10.000,    e51  10.000,    e52  10.000,    e53  10.000,    e54  10.000,    e55  10.000,    e56  10.000,    e57  10.000,    e58  10.000,    e59  10.000,    e60  10.000,    e61  10.000,    e62  10.000,    e63  10.000,    e64  10.000
e65  10.000,    e66  10.000,    e67  10.000,    e68  10.000,    e69  10.000,    e70  10.000,    e71  10.000,    e72  10.000,    e73  10.000,    e74  10.000,    e75  10.000,    e76  10.000,    e77  10.000,    e78  10.000,    e79  10.000,    e80  10.000
e81  10.000,    e82  10.000,    e83  10.000,    e84  10.000,    e85  10.000,    e86  10.000,    e87  10.000,    e88  10.000,    e89  10.000,    e90  10.000,    e91  10.000,    e92  10.000,    e93  10.000,    e94  10.000,    e95  10.000,    e96  10.000
e97  10.000,    e98  10.000,    e99  10.000,    e100 10.000,    e101 10.000,    e102 10.000,    e103 10.000,    e104 10.000,    e105 10.000,    e106 10.000,    e107 10.000,    e108 10.000,    e109 10.000,    e110 10.000,    e111 10.000,    e112 10.000
e113 10.000,    e114 10.000,    e115 10.000,    e116 10.000,    e117 10.000,    e118 10.000,    e119 10.000,    e120 10.000,    e121 10.000,    e122 10.000,    e123 10.000,    e124 10.000,    e125 10.000,    e126 10.000,    e127 10.000,    e128 10.000
e129 10.000,    e130 10.000,    e131 10.000,    e132 10.000,    e133 10.000,    e134 10.000,    e135 10.000,    e136 10.000,    e137 10.000,    e138 10.000,    e139 10.000,    e140 10.000,    e141 10.000,    e142 10.000,    e143 10.000,    e144 10.000
e145 10.000,    e146 10.000,    e147 10.000,    e148 10.000,    e149 10.000,    e150 10.000,    e151 10.000,    e152 10.000,    e153 10.000,    e154 10.000,    e155 10.000,    e156 10.000,    e157 10.000,    e158 10.000,    e159 10.000,    e160 10.000
e161 10.000,    e162 10.000,    e163 10.000,    e164 10.000,    e165 10.000,    e166 10.000,    e167 10.000,    e168 10.000,    e169 10.000,    e170 10.000,    e171 10.000,    e172 10.000,    e173 10.000,    e174 10.000,    e175 10.000,    e176 10.000
e177 10.000,    e178 10.000,    e179 10.000,    e180 10.000,    e181 10.000,    e182 10.000,    e183 10.000,    e184 10.000,    e185 10.000,    e186 10.000,    e187 10.000,    e188 10.000,    e189 10.000,    e190 10.000,    e191 10.000,    e192 10.000
e193 10.000,    e194 10.000,    e195 10.000,    e196 10.000,    e197 10.000,    e198 10.000,    e199 10.000,    e200 10.000"""

rec = False
step = 1

rc('text',usetex=True)
rc('font',family='serif')

# Determine length
total = 0
for l in profit_r_raw0.split('\n'):
	for e in l.split(','):
		total += 1

profit_r0 = np.zeros(shape=(total))
profit_r2 = np.zeros(shape=(total))
profit_r5 = np.zeros(shape=(total))

i = 0
for p_raw in profit_r_raw0.split('\n'):
	for p_raw2 in p_raw.split(','):
		profit_r0[i] = float(p_raw2.split()[1])
		i+=1

i = 0
for p_raw in profit_r_raw2.split('\n'):
	for p_raw2 in p_raw.split(','):
		profit_r2[i] = float(p_raw2.split()[1])
		i+=1
i = 0
for p_raw in profit_r_raw5.split('\n'):
	for p_raw2 in p_raw.split(','):
		profit_r5[i] = float(p_raw2.split()[1])
		i+=1

max_profit_capacities = []
for profits in [profit_r0,profit_r2,profit_r5]:
	comb = zip(profits,step*np.arange(1,total+1))
	max = float("-inf")
	res = None
	for (p,r) in comb:
		if max < p:
			max = p; res = r
	max_profit_capacities.append(res)

alphas_used = [0.0,0.2,0.5]
for (a,p) in zip(alphas_used,max_profit_capacities):
	print "alpha = "+str(a)+", w = "+str(p)

rec_price = np.zeros(shape=(total))

i = 0
#for p_raw in rec_price_raw.split('\n'):
#	for p_raw2 in p_raw.split(','):
#		rec_price[i] = float(p_raw2.split()[1])
#		i+=1

fig = plt.figure()
ax = fig.add_subplot(111)
ax.grid(True)
ax2 = ax.twinx()
ax2.set_ylabel(r"REC Price")
ax.set_xlabel(r'Installed Renewable Capacity')
ax.set_ylabel(r'Profit of the renewable producer')

x = step*np.arange(1,total+1)

# REC price
if rec:
	rec_price_plot, = ax2.plot(x,rec_price,'x',c='black')

# Profits
profit_r0_plt,= ax.plot(x,profit_r0,',',c='black')
profit_r2_plt,= ax.plot(x,profit_r2,'-',c='black')
profit_r5_plt,= ax.plot(x,profit_r5,'--',c='black')
if rec:
	plots   = [profit_r0_plt,profit_r2_plt,profit_r5_plt,rec_price_plot]
	my_legd = [r"$\Xi_r$, 0\% RPS", r"$\Xi_r$, 20\% RPS", r"$\Xi_r$, 50\% RPS", r"$p_{REC}$"]
else:
	plots   = [profit_r0_plt,profit_r2_plt,profit_r5_plt]
	my_legd = [r"$\Xi_r$, 0\% RPS", r"$\Xi_r$, 20\% RPS", r"$\Xi_r$, 50\% RPS"]

ax.legend(plots, my_legd, loc='upper center', bbox_to_anchor=(0.5, -0.125),fancybox=False, shadow=False, ncol=5)
fig.savefig("foo.png",bbox_inches='tight')









